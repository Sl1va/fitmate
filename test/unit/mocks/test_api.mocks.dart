// Mocks generated by Mockito 5.4.0 from annotations
// in fitmate/test/unit/test_api.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:fitmate/api/api.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:openfoodfacts/model/ProductResultV3.dart' as _i2;
import 'package:openfoodfacts/openfoodfacts.dart' as _i3;
import 'package:openfoodfacts/utils/AbstractQueryConfiguration.dart' as _i7;
import 'package:openfoodfacts/utils/QueryType.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductResultV3_0 extends _i1.SmartFake
    implements _i2.ProductResultV3 {
  _FakeProductResultV3_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchResult_1 extends _i1.SmartFake implements _i3.SearchResult {
  _FakeSearchResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiHelper extends _i1.Mock implements _i4.ApiHelper {
  MockApiHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.ProductResultV3> getProductV3(
    _i3.ProductQueryConfiguration? configuration, {
    _i3.User? user,
    _i6.QueryType? queryType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductV3,
          [configuration],
          {
            #user: user,
            #queryType: queryType,
          },
        ),
        returnValue:
            _i5.Future<_i2.ProductResultV3>.value(_FakeProductResultV3_0(
          this,
          Invocation.method(
            #getProductV3,
            [configuration],
            {
              #user: user,
              #queryType: queryType,
            },
          ),
        )),
      ) as _i5.Future<_i2.ProductResultV3>);
  @override
  _i5.Future<_i3.SearchResult> searchProducts(
    _i3.User? user,
    _i7.AbstractQueryConfiguration? configuration, {
    _i6.QueryType? queryType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchProducts,
          [
            user,
            configuration,
          ],
          {#queryType: queryType},
        ),
        returnValue: _i5.Future<_i3.SearchResult>.value(_FakeSearchResult_1(
          this,
          Invocation.method(
            #searchProducts,
            [
              user,
              configuration,
            ],
            {#queryType: queryType},
          ),
        )),
      ) as _i5.Future<_i3.SearchResult>);
}
